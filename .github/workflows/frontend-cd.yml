# .github/workflows/frontend-cd.yml
# Rationale: GitHub Actions CD workflow: deploys to Vercel Staging upon merge to `main`, then runs E2E tests.
# Task ID: FE-084
# User Story Reference: US-FE-052

name: Frontend CD to Staging

on:
  push:
    branches:
      - main
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-ci.yml"
      - ".github/workflows/frontend-cd.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-staging:
    name: Deploy to Vercel Staging
    runs-on: ubuntu-latest
    environment: # Corrected: Reverted to map form for environment
      name: staging
    defaults:
      run:
        working-directory: ./frontend
    outputs:
      deployment_url: ${{ steps.deploy-vercel-staging.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_MEDUSA_BACKEND_URL: ${{ secrets.STAGING_MEDUSA_BACKEND_URL }}
          # Ensure NEXT_PUBLIC_SENTRY_ENVIRONMENT=staging is set in Vercel Staging project settings for the build.

      - name: Deploy to Vercel Staging
        id: deploy-vercel-staging # Give an ID to access outputs
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}

      - name: Output Vercel Staging URL
        run: |
          echo "Deployed to Staging: ${{ steps.deploy-vercel-staging.outputs.url }}"

  test-staging-e2e:
    name: Test Staging Environment (E2E)
    runs-on: ubuntu-latest
    needs: deploy-staging # Run after successful staging deployment
    if: success() # Only run if deploy-staging succeeded
    environment:
      name: staging
      url: ${{ needs.deploy-staging.outputs.deployment_url }}
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (for Cypress)
        run: npm ci

      - name: Run Cypress E2E tests against Staging
        run: npm run cy:run -- --config baseUrl=${{ needs.deploy-staging.outputs.deployment_url }}
        env:
          # Pass environment variables needed by Cypress tests, if any
          # For example, if Cypress tests need API keys for login:
          # CYPRESS_CUSTOMER_EMAIL: ${{ secrets.STAGING_CUSTOMER_EMAIL_TEST }}
          # CYPRESS_CUSTOMER_PASSWORD: ${{ secrets.STAGING_CUSTOMER_PASSWORD_TEST }}
          # These secrets would need to be configured in GitHub Actions secrets.
          # Alternatively, Cypress Cloud can manage environment variables.
          # For now, assuming baseUrl is the primary configuration needed for test execution.
          NEXT_PUBLIC_MEDUSA_BACKEND_URL: ${{ secrets.STAGING_MEDUSA_BACKEND_URL }} # If tests make direct API calls not through UI

      - name: Upload E2E test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: staging-e2e-artifacts-${{ github.run_number }}
          path: |
            frontend/cypress/screenshots
            frontend/cypress/videos
